Criando o HTML

linguagem de modelagem que cria paginas html utilizando JS

cria-se um arquivo pelo terminal, que inicia o projeto em NODE
	- npm init -y (na pasta, é criado um arquivo package.json)

abra o editor de código
cria um arquivo html e depois iremos passar para EJS

utilizando BOOTSTRAP 
	- é um pacote cheio de classes e estilos css que usamos simplesmente as classes dele que ja vem com os estilos pré-prontos
	- é uma forma mais simples para não escrever css agora, pois o foco é outro
	- copia só uma parte do link no site oficial, em download > CDN
		<link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">

	- tudo funciona por classes
	- lembrar de colocar o rel="stylesheet" para funcionar o estilo
	- atentar a documentação, pois há algumas coisas que foram subtituidas ou obsoleto
		https://stackoverflow.com/questions/65915635/why-the-jumbotron-class-is-not-working-in-bootstrap-5-version
	- padding e margin por exemplo, na aula foi feito com style em html e procurando na documentação.. foi possivel fazer com as classes mesmo

Criando o servidor

Renomear o arquivo, mas a extensão/tipo dele de html para .ejs
Baixar algumas ferramentas (atualizar npm, ejs, express

server.js (cria o arquivo)
	- const express = require('express');
	- cria-se um servidor para mostrar tudo que vamos criando na pasta raiz do projeto
	- pega tudo e renderiza para mostrar no navegador 
	- instanciamos e guardamos em uma variavel (app): const app = express();
	- temos que falar para o express que vamos usar ejs
	- set + dois argumentos, são funções / métodos que existe dentro do express: app.set("view engine", "ejs");
	- view engine: ferramento que utilizará para renderizar html + ejs: vamos usar o ejs pra isso 
	- agora criamos um ROTA: 
		app.get("/", function(req, res){
			res.render("index");
		})
	• app.get: criando uma rota, onde get é um método dentro do express
	• "/": seria nosso dominio nosso site, sem nada na frente fulano.com.br
	• res: de response, de resposta
	• render: renderizar a pagina entre parenteses

	configurado tudo, agora precisa rodar

	- app.listen(8080);
		app carrega tudo que tem dentro de express; listen é uma função dentro do express que fica ouvindo uma porta, a 8080
		basicamente falamos para o servidor que ele ta rodando na nossa maquina, quando chamamos a porta 8080, executa tudo que esta ali
		o que é essa porta?
			localhost que possui várias portas!
			eu escolhi e disse para o app.listen que vai ler a porta 8080 

	adicionado um console.log("Rodando") no final, para mostrar que funcionou.

Vamos ao terminal, ctrl+l (limpa) e 'node server', o resultado é o console.log

apareceu alguns erros, mas verificado que esta lendo a porta

- cria a pasta 'views' (pois o arquivo index, precisa estar .ejs e dentro da pasta) e coloca o arquivo index.ejs

crtl+c (PARA de rodar a aplicação pelo terminal)

RODANDO: node server ! 

da erro .. o mesmo erro antes de criar a pasta views

* pasta views no local errado, por isso não funcinou!

Separando partes do layout

para utilizar as partes do html (index) em outras paginas.. criamos arquivos com os nomes e colamos os elementos do index nele;

- head.ejs
- header.ejs
- footer.ejs

cada um com sua parte, retirada do html anteriormente construida.

Agora vamos incluir arquivos ejs no documento

	SINTAXE: <%- include('head'); %>

		<%- %> (falando para o ejs, 
		include('head'); (entende-se como comando de ejs ~include~ que dentro informa o que vai incluir 'head')

ATENÇÂO: 

alterações feitas em ejs, não precisa parar o servidor; agora se as alterações forem em js, ai sim precisa para o servidor


Nova pagina e menu

- criamos o about, pegando os demais arquivo ejs,  acrescentando apenas um main e div, h1 e p no corpo da pagina

- agora faremos o caminho de sobre > index e o contrario (/sobre > / e / > /sobre)
	tudo linkado, devidamente

Viwes e Partials - Organização

organizando pastas e arquivos !

	- partials / partes: head, header e footer
	- pages / paginas : index e about
	
arrumando as chamadas 'server'
	* não precisa chamar a pasta views pq o express ja entende que todos os arquivos precisa estar dentro desta pasta.

	app.get("/", function (req, res){
	    res.render("pages/index  ");
	})
	app.get("/sobre", function (req, res){
	    res.render("pages/about");
	})

em index e aboute, em pages.. arrumar o caminho também!

	('../partials/hear .. header .. footer')

Passando um objeto para ejs

dentro de about, especificamente dentro do body e antes da main, segundo include ejs que é o header

        <%- include('../partials/header', {pagina: 'sobre'}); %>

	entre {} é o objeto qe o ejs, permite passar

dentro de header, precisamos colocar a pagina que usou de referencia

	<p>Página: <%- pagina %></p>
	
	portanto dentro de sobre, ira renderizar o titulo da pagina que esta

então conclui-se que o objeto que o ejs permite, pode ter algum conteudo.. não sendo unicamente apenas uma palavras, pode ser algo maior por exemplo. 
logo chamamos a sintaxe do ejs e passa o nome do objeto referido, nada de codigos muito grandes, a não ser o nome do objeto mesmo <%- %>

- neste sentido, que passamos um objeto, o sobre funciona normal.. porém o index não. 
	isso acontece pois, estamos utilizando o header em outro lugar, que nao tem 'pagina' como objeto anexado; lembrando que o nome do objeto deve ser igual ao nome da pagina

        <%- include('../partials/header', {pagina: 'Inicio'}); %>

mudamos de lugar, e deixamos a pagina no header, após o nav. Na interface do front ele ficou embaixo da barra de menu

Agora ..

não passando o index o objeto, preciso que o header entenda que quando NÃO for passado um objeto pagina, ele mostrará HOME. E se for passado, o objeto pagina, ai mostra o que vem no objeto

    <p>Página: <%= typeof pagina != 'undefined' ? pagina: 'Inicio' %></p>

o index não terá nada, não passaremos nada.. que seria ~ , {pagina: 'Inicio'} ~

mas quando header NÃO RECEBER nada de objeto, ele entenda ser 'Inicio'
	= (renderizando algo que veio dinamicamente)
	typeof 
	pagina != '' ? pagina:  (comparação)

se pagina for diferente de indefinido, ENTÃO mostre o Inicio (fizemos uma condição de TERNÁRIO em JS)

após alterações.. tanto o inicio quando o sobre, ambos aparecem Inicio . . POIS TAMBÉM RETIREI de about o objeto

quando informo o objeto na pagina indicada, ai sim aparece

Foreach

no INDEX
	- criei uma lista com li e msg
	- suponhamos que eu quero que venha la do backend e seja renderizado no ejs
	- fui no server.js e criei um ARRAY com varios objetos dentro

const items = [
        {
            title: "D",
            message: "Desenvolver aplicações/serviços de forma fácil"
        },
        {
            title: "E",
            message: "EJS usa JavaScript para renderizar HTML"
        },
        {
            title: "M",
            message: "Muito fácil de usar"
        },
        {
            title: "A",
            message: "Amorzinho"
        },
        {
            title: "I",
            message: "Install eja"
        },
        {
            title: "S",
            message: "Sintaxe simples"
        }
    ];

isso no app.get do index, antes da res.render('pages/index');

	- agora precisamos passar para o nosso index
	- arquivo ejs aceitam objetos, portanto eu passo na frente do res.render dentro do parenteses

	res.render("pages/index", {
        	qualitys: items,
	});

pronto! criamos e passamos o objeto

	- portanto no index dentro do server, eu passo o index e o objeto criado
	- precisamos ir no index e usar o qualitys
	- eu apago o que ja tenho de lista e li e insiro um FOREACH, um looping para poder olhar o array de objeto, renderizando cada elemento na li
	- faço um include ejs no html e chamo o 'qualitys' + forEach e uma função anonima, sem nome
	- ja que qualitys recebe items, ele fará a leitura de cada elemento..
	- a função recebe quality, pois referencia um item do array, apenas e a cada vez que ele rodar, o forEach, será cada item do array

		<% qualitys.forEach(function (quality) {
                    
                }) %>

aqui esta a função, vazia por enquanto

	- agora devemos colocar nosso li, dentro da função..
	- eu não posso simplesmente colar um arquivo html dentro de ejs, com função js
	- feche a tag ejs e cole o html
	- depois abra novamente

		<% qualitys.forEach(function (quality) { %>                    
                    <li>
                        <strong>D</strong> escrito algo com D
                    </li>
                <% }) %>

	- dai faz a substituição da escrita com os elementos do array
		
		<% qualitys.forEach(function (a) { %>                    
                    <li>
                        <strong>a.title</strong> a.message
                    </li>
                <% }) %>
	- alterado o arquivo js é preciso ir no terminal PARAR o servidor e depois rodar de novo

		a.title a.message
		a.title a.message
		a.title a.message
		a.title a.message
		a.title a.message
		a.title a.message
		D escrito algo com D

aparece desta forma na nossa pagina, pois isso é java script

	- devemos colocar <% novamente para que entenda ser js e nçao html

	<%= a.title5> faço uso do = pois estou printando algo na tela

		<% qualitys.forEach(function (a) { %>                    
                    <li>
                        <strong><%= a.title %></strong> <%= a.message %>
                    </li>
                <% }) %>

resultado:

		D Desenvolver aplicações/serviços de forma fácil
		E EJS usa JavaScript para renderizar HTML
		M Muito fácil de usar
		A Amorzinho
		I Install ejS
		S Sintaxe simples
		
	- questão de BOAS PRATICAS: temos um plural de qualitys, mas o 'a' não esta adequado, portanto usamos o nome no singular. Afinal estamos falando de um looping

	
		
