Criando o HTML

linguagem de modelagem que cria paginas html utilizando JS

cria-se um arquivo pelo terminal, que inicia o projeto em NODE
	- npm init -y (na pasta, é criado um arquivo package.json)

abra o editor de código
cria um arquivo html e depois iremos passar para EJS

utilizando BOOTSTRAP 
	- é um pacote cheio de classes e estilos css que usamos simplesmente as classes dele que ja vem com os estilos pré-prontos
	- é uma forma mais simples para não escrever css agora, pois o foco é outro
	- copia só uma parte do link no site oficial, em download > CDN
		<link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">

	- tudo funciona por classes
	- lembrar de colocar o rel="stylesheet" para funcionar o estilo
	- atentar a documentação, pois há algumas coisas que foram subtituidas ou obsoleto
		https://stackoverflow.com/questions/65915635/why-the-jumbotron-class-is-not-working-in-bootstrap-5-version
	- padding e margin por exemplo, na aula foi feito com style em html e procurando na documentação.. foi possivel fazer com as classes mesmo

Criando o servidor

Renomear o arquivo, mas a extensão/tipo dele de html para .ejs
Baixar algumas ferramentas (atualizar npm, ejs, express

server.js (cria o arquivo)
	- const express = require('express');
	- cria-se um servidor para mostrar tudo que vamos criando na pasta raiz do projeto
	- pega tudo e renderiza para mostrar no navegador 
	- instanciamos e guardamos em uma variavel (app): const app = express();
	- temos que falar para o express que vamos usar ejs
	- set + dois argumentos, são funções / métodos que existe dentro do express: app.set("view engine", "ejs");
	- view engine: ferramento que utilizará para renderizar html + ejs: vamos usar o ejs pra isso 
	- agora criamos um ROTA: 
		app.get("/", function(req, res){
			res.render("index");
		})
	• app.get: criando uma rota, onde get é um método dentro do express
	• "/": seria nosso dominio nosso site, sem nada na frente fulano.com.br
	• res: de response, de resposta
	• render: renderizar a pagina entre parenteses

	configurado tudo, agora precisa rodar

	- app.listen(8080);
		app carrega tudo que tem dentro de express; listen é uma função dentro do express que fica ouvindo uma porta, a 8080
		basicamente falamos para o servidor que ele ta rodando na nossa maquina, quando chamamos a porta 8080, executa tudo que esta ali
		o que é essa porta?
			localhost que possui várias portas!
			eu escolhi e disse para o app.listen que vai ler a porta 8080 

	adicionado um console.log("Rodando") no final, para mostrar que funcionou.

Vamos ao terminal, ctrl+l (limpa) e 'node server', o resultado é o console.log

apareceu alguns erros, mas verificado que esta lendo a porta

- cria a pasta 'views' (pois o arquivo index, precisa estar .ejs e dentro da pasta) e coloca o arquivo index.ejs

crtl+c (PARA de rodar a aplicação pelo terminal)

RODANDO: node server ! 

da erro .. o mesmo erro antes de criar a pasta views

* pasta views no local errado, por isso não funcinou!

Separando partes do layout

para utilizar as partes do html (index) em outras paginas.. criamos arquivos com os nomes e colamos os elementos do index nele;

- head.ejs
- header.ejs
- footer.ejs

cada um com sua parte, retirada do html anteriormente construida.

Agora vamos incluir arquivos ejs no documento

	SINTAXE: <%- include('head'); %>

		<%- %> (falando para o ejs, 
		include('head'); (entende-se como comando de ejs ~include~ que dentro informa o que vai incluir 'head')

ATENÇÂO: 

alterações feitas em ejs, não precisa parar o servidor; agora se as alterações forem em js, ai sim precisa para o servidor

